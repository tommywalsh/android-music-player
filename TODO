DONE Make simple library browser in UI
DONE Import music scanning code (can do brute-force whole-library scan for now)
DONE Serve up scanned bands using library API, verify using UI
DONE Add database
DONE Add full-library shuffle playback
DONE Create custom player UI with better controls
DONE Implement new play modes (locking, etc.)

--


8) Make functional library browser that can initiate new playback modes on player

---
Cleanup opportunities:
- Audit TODOs and "future directions"
- Scanner needs to kick off automatically, without user needing to switch to the library UI!

---
Keep adding missing features like locking, playback modes, etc.
  - Allow "early access" to database before first scan complete?
  - Better use of external media dirs (e.g. require mcotp to be under a "Music" directory?

How will we communicate non-standard info across app/service boundary, like double-shot weekend, and sequential mode, etc.?

How will we save player state to persist across close/open? Or is that unimportant?
---
DEFERRED Augment scanning code to handle "last updated" file info, so we can update DB as SD card changes
DEFERRED Playback behaves differently for:
    - DB uninitialized and idle
    - DB partially initialized, initialization underway
    - DB fully initialized and idle
    - DB fully initialized, being rescanned  (potentially same as initialized/idle)

DEFERRED
- less-used modes: year, decade, block party, band sequential
